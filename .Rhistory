abs(cor(datExpr,use="p"))^6
source('R/MODA.R')
intModules1 <- WeightedModulePartitionAmoutain(datExpr1,5,ResultFolder,
indicator,GeneNames,maxsize=100,minsize=50)
source('R/MODA.R')
intModules1 <- WeightedModulePartitionAmoutain(datExpr1,5,ResultFolder,
indicator,GeneNames,maxsize=100,minsize=50)
W <- abs(cor(datExpr,use="p"))^pwr
W <- abs(cor(datExpr,use="p"))^6.
W <- abs(cor(datExpr,use="p"))^6
pwr
class(pwr)
length(pwr)
WeightedModulePartitionAmoutain
source('R/MODA.R')
intModules1 <- WeightedModulePartitionAmoutain(datExpr1,5,ResultFolder,
indicator,GeneNames,maxsize=100,minsize=50)
intModules1 <- WeightedModulePartitionAmoutain(datExpr1,5,ResultFolder,
GeneNames,maxsize=100,minsize=50)
mymodule <- getPartition(ResultFolder)
mymodule
ResultFolder
randIndex(table(mymodule,truemodule),adjust=F)
unlink(ResultFolder, recursive = TRUE)
intModules1 <- WeightedModulePartitionAmoutain(datExpr1,8,ResultFolder,GeneNames,maxsize=100,minsize=30)
mymodule <- getPartition(ResultFolder)
randIndex(table(mymodule,truemodule),adjust=F) #0.936497
unlink(ResultFolder, recursive = TRUE)
intModules1 <- WeightedModulePartitionAmoutain(datExpr1,8,ResultFolder,GeneNames,maxsize=100,minsize=30)
source('R/MODA.R')
unlink(ResultFolder, recursive = TRUE)
intModules1 <- WeightedModulePartitionAmoutain(datExpr1,8,ResultFolder,GeneNames,maxsize=100,minsize=20)
mymodule <- getPartition(ResultFolder)
randIndex(table(mymodule,truemodule),adjust=F) #0.67
mymodule\
mymodule
mymodule <- getPartition(ResultFolder)
ResultFolder
mymodule <- rep(0,500)
ResultFiles <- list.files(ResultFolder)
ResultFiles
ResultFiles <- ResultFiles[grepl('.txt',ResultFiles)]
for (i in 1:length(ResultFiles)){
ap <- as.numeric(readLines(paste(ResultFolder,'/',ResultFiles[i],sep='')))
mymodule[ap] <- i
}
i
ap
mymodule[ap] <- i
i=1
ap <- as.numeric(readLines(paste(ResultFolder,'/',ResultFiles[i],sep='')))
ap
mymodule[ap] <- i
i=2
mymodule[ap] <- i
ap <- as.numeric(readLines(paste(ResultFolder,'/',ResultFiles[i],sep='')))
mymodule[ap] <- i
ap
i=2
ResultFiles[i]
GeneNames
dim(W)
for (ii in 1:4) {
}
maxsize
minsize
minsize=20
for (ii in 1:4) {
abegin = 0.01
aend = 0.9
for (i in 1:20) {
x <- CGPFixSS(W,z,rep(1/N,N),a=(abegin+aend)/2,lambda=0,maxiter = 50)
predictedid <- which(x[[2]]!=0)
if(length(predictedid) > maxsize){
abegin = (abegin+aend)/2
}else if (length(predictedid) < minsize){
aend = (abegin+aend)/2
}else
break
}
if(length(predictedid) <= maxsize){
modulescore = sum(W[predictedid,predictedid])
write.table(GeneNames[predictedid],file = paste(foldername,'/',
floor(modulescore),'-moduleid-',idx,'.txt',sep=''),
quote = FALSE, row.names = FALSE, col.names = FALSE)
idx <- idx+1
}
else if(length(predictedid) > maxsize){
modulescoreW = W[predictedid,predictedid]
print(paste('Atom! with size',length(predictedid),sep=' '))
tmpstr = as.numeric(GeneNames[predictedid])-1
forTotalcompletegraph(tmpstr,modulescoreW,saveAtomfile)
}
W = W[-predictedid,-predictedid]
GeneNames = GeneNames[-predictedid]
N = length(GeneNames)
print(paste('Finishing module ',ii,sep=''))
}
dim(W)
length(GeneNames)
N
ii=5
abegin = 0.01
aend = 0.9
for (i in 1:20) {
x <- CGPFixSS(W,z,rep(1/N,N),a=(abegin+aend)/2,lambda=0,maxiter = 50)
predictedid <- which(x[[2]]!=0)
if(length(predictedid) > maxsize){
abegin = (abegin+aend)/2
}else if (length(predictedid) < minsize){
aend = (abegin+aend)/2
}else
break
}
power
W <- abs(cor(datExpr,use="p"))^power
W[W < tao] <- 0
N = dim(W)[1]
z <- rep(0,N)
idx <- 1
N
dim(W)
length(GeneNames)
GeneNames=1:500
Nmodule=4
for (ii in 1:Nmodule) {
abegin = 0.01
aend = 0.9
for (i in 1:20) {
x <- CGPFixSS(W,z,rep(1/N,N),a=(abegin+aend)/2,lambda=0,maxiter = 50)
predictedid <- which(x[[2]]!=0)
if(length(predictedid) > maxsize){
abegin = (abegin+aend)/2
}else if (length(predictedid) < minsize){
aend = (abegin+aend)/2
}else
break
}
if(length(predictedid) <= maxsize){
modulescore = sum(W[predictedid,predictedid])
write.table(GeneNames[predictedid],file = paste(foldername,'/',
floor(modulescore),'-moduleid-',idx,'.txt',sep=''),
quote = FALSE, row.names = FALSE, col.names = FALSE)
idx <- idx+1
}
else if(length(predictedid) > maxsize){
modulescoreW = W[predictedid,predictedid]
print(paste('Atom! with size',length(predictedid),sep=' '))
tmpstr = as.numeric(GeneNames[predictedid])-1
forTotalcompletegraph(tmpstr,modulescoreW,saveAtomfile)
}
W = W[-predictedid,-predictedid]
GeneNames = GeneNames[-predictedid]
N = length(GeneNames)
print(paste('Finishing module ',ii,sep=''))
if(N < 3 | sum(W)==0)
break
}
N
dim(W)
length(GeneNames)
for (ii in 5:8) {
abegin = 0.01
aend = 0.9
for (i in 1:20) {
x <- CGPFixSS(W,z,rep(1/N,N),a=(abegin+aend)/2,lambda=0,maxiter = 50)
predictedid <- which(x[[2]]!=0)
if(length(predictedid) > maxsize){
abegin = (abegin+aend)/2
}else if (length(predictedid) < minsize){
aend = (abegin+aend)/2
}else
break
}
if(length(predictedid) <= maxsize){
modulescore = sum(W[predictedid,predictedid])
write.table(GeneNames[predictedid],file = paste(foldername,'/',
floor(modulescore),'-moduleid-',idx,'.txt',sep=''),
quote = FALSE, row.names = FALSE, col.names = FALSE)
idx <- idx+1
}
else if(length(predictedid) > maxsize){
modulescoreW = W[predictedid,predictedid]
print(paste('Atom! with size',length(predictedid),sep=' '))
tmpstr = as.numeric(GeneNames[predictedid])-1
forTotalcompletegraph(tmpstr,modulescoreW,saveAtomfile)
}
W = W[-predictedid,-predictedid]
GeneNames = GeneNames[-predictedid]
N = length(GeneNames)
print(paste('Finishing module ',ii,sep=''))
if(N < 3 | sum(W)==0)
break
}
mymodule <- getPartition(ResultFolder)
randIndex(table(mymodule,truemodule),adjust=F) #0.67
unlink(ResultFolder, recursive = TRUE)
length(GeneNames)
GeneNames
GeneNames=1:500
source('R/MODA.R')
intModules1 <- WeightedModulePartitionAmoutain(datExpr1,8,ResultFolder,GeneNames,maxsize=100,minsize=50)
mymodule <- getPartition(ResultFolder)
randIndex(table(mymodule,truemodule),adjust=F) #0.67
unlink(ResultFolder, recursive = TRUE)
intModules1 <- WeightedModulePartitionAmoutain(datExpr1,8,ResultFolder,GeneNames,maxsize=100,minsize=50)
mymodule <- getPartition(ResultFolder)
randIndex(table(mymodule,truemodule),adjust=F) #0.8193667 for minsize=50
unlink(ResultFolder, recursive = TRUE)
intModules1 <- WeightedModulePartitionAmoutain(datExpr1,8,ResultFolder,GeneNames,maxsize=100,minsize=20)
mymodule <- getPartition(ResultFolder)
randIndex(table(mymodule,truemodule),adjust=F) #0.8193667 for minsize=50
unlink(ResultFolder, recursive = TRUE)
intModules1 <- WeightedModulePartitionAmoutain(datExpr1,8,ResultFolder,GeneNames,maxsize=100,minsize=80)
mymodule <- getPartition(ResultFolder)
randIndex(table(mymodule,truemodule),adjust=F) #0.8193667 for minsize=50
intModules1 <- WeightedModulePartitionAmoutain(datExpr1,8,ResultFolder,GeneNames,maxsize=100,minsize=90)
mymodule <- getPartition(ResultFolder)
randIndex(table(mymodule,truemodule),adjust=F) #0.8193667 for minsize=50
unlink(ResultFolder, recursive = TRUE)
intModules1 <- WeightedModulePartitionAmoutain(datExpr1,8,ResultFolder,GeneNames,maxsize=100,minsize=95)
mymodule <- getPartition(ResultFolder)
randIndex(table(mymodule,truemodule),adjust=F) #0.8193667 for minsize=50
unlink(ResultFolder, recursive = TRUE)
intModules1 <- WeightedModulePartitionAmoutain(datExpr1,8,ResultFolder,GeneNames,maxsize=100,minsize=95)
unlink(ResultFolder, recursive = TRUE)
intModules1 <- WeightedModulePartitionAmoutain(datExpr1,8,ResultFolder,GeneNames,maxsize=100,minsize=100)
mymodule <- getPartition(ResultFolder)
randIndex(table(mymodule,truemodule),adjust=F) #0.8193667 for minsize=50
unlink(ResultFolder, recursive = TRUE)
rm(lsit=ls())
rm(list=ls())
data(synthetic)
GeneNames <- colnames(datExpr1)
ResultFolder <- 'ForSynthetic' # where middle files are stored
indicator <- 'X'     # indicator for data profile 1
intModules1 <- WeightedModulePartitionHierarchical(datExpr1,ResultFolder,
indicator,'Density')
mymodule <- getPartition(ResultFolder)
randIndex(table(mymodule,truemodule),adjust=F) #0.0.8823006
unlink(ResultFolder, recursive = TRUE)
WeightedModulePartitionSpectral(datExpr1,ResultFile,indicator,
GeneNames,k=5)
mymodule <- getPartition(ResultFolder)
randIndex(table(mymodule,truemodule),adjust=F) #0.9691784
unlink(ResultFolder, recursive = TRUE)
intModules1 <- WeightedModulePartitionLouvain(datExpr1,ResultFolder,indicator,GeneNames)
mymodule <- getPartition(ResultFolder)
randIndex(table(mymodule,truemodule),adjust=F) #0.936497
unlink(ResultFolder, recursive = TRUE)
intModules1 <- WeightedModulePartitionAmoutain(datExpr1,8,ResultFolder,GeneNames,maxsize=100,minsize=100)
mymodule <- getPartition(ResultFolder)
randIndex(table(mymodule,truemodule),adjust=F) #0.9274228
unlink(ResultFolder, recursive = TRUE)
rm(list=ls())
data(synthetic)
GeneNames <- colnames(datExpr1)
ResultFolder <- 'ForSynthetic' # where middle files are stored
indicator <- 'X'     # indicator for data profile 1
truemodule <- c(rep(1,100),rep(2,100),rep(3,100),rep(4,100),rep(5,100))
intModules1 <- WeightedModulePartitionHierarchical(datExpr1,ResultFolder,
indicator,'Density')
mymodule <- getPartition(ResultFolder)
randIndex(table(mymodule,truemodule),adjust=F) #0.0.8823006
unlink(ResultFolder, recursive = TRUE)
WeightedModulePartitionSpectral(datExpr1,ResultFile,indicator,
GeneNames,k=5)
mymodule <- getPartition(ResultFolder)
randIndex(table(mymodule,truemodule),adjust=F) #0.9691784
unlink(ResultFolder, recursive = TRUE)
intModules1 <- WeightedModulePartitionLouvain(datExpr1,ResultFolder,indicator,GeneNames)
mymodule <- getPartition(ResultFolder)
randIndex(table(mymodule,truemodule),adjust=F) #0.936497
unlink(ResultFolder, recursive = TRUE)
intModules1 <- WeightedModulePartitionAmoutain(datExpr1,8,ResultFolder,GeneNames,maxsize=100,minsize=100)
mymodule <- getPartition(ResultFolder)
randIndex(table(mymodule,truemodule),adjust=F) #0.9274228
unlink(ResultFolder, recursive = TRUE)
rm(list=ls())
data(synthetic)
GeneNames <- colnames(datExpr1)
ResultFolder <- 'ForSynthetic' # where middle files are stored
indicator <- 'X'     # indicator for data profile 1
truemodule <- c(rep(1,100),rep(2,100),rep(3,100),rep(4,100),rep(5,100))
intModules1 <- WeightedModulePartitionHierarchical(datExpr1,ResultFolder,
indicator,'Density')
mymodule <- getPartition(ResultFolder)
randIndex(table(mymodule,truemodule),adjust=F) #0.0.8823006
unlink(ResultFolder, recursive = TRUE)
WeightedModulePartitionSpectral(datExpr1,ResultFolder,indicator,
GeneNames,k=5)
mymodule <- getPartition(ResultFolder)
randIndex(table(mymodule,truemodule),adjust=F) #0.9691784
unlink(ResultFolder, recursive = TRUE)
intModules1 <- WeightedModulePartitionLouvain(datExpr1,ResultFolder,indicator,GeneNames)
mymodule <- getPartition(ResultFolder)
randIndex(table(mymodule,truemodule),adjust=F) #0.936497
unlink(ResultFolder, recursive = TRUE)
intModules1 <- WeightedModulePartitionAmoutain(datExpr1,8,ResultFolder,GeneNames,maxsize=100,minsize=100)
mymodule <- getPartition(ResultFolder)
randIndex(table(mymodule,truemodule),adjust=F) #0.9274228
unlink(ResultFolder, recursive = TRUE)
colnames(datExpr2)
heatmap(dat2)
rm(list=ls())
truemodule <- c(rep(1,100),rep(2,100),rep(3,100),rep(4,200))
truemodule
data(synthetic)
rm(list=ls())
data(synthetic)
GeneNames <- colnames(datExpr2)
ResultFolder <- 'ForSynthetic' # where middle files are stored
indicator <- 'X'     # indicator for data profile 1
truemodule <- c(rep(1,100),rep(2,100),rep(3,100),rep(4,200))
datExpr1 <- datExpr2
intModules1 <- WeightedModulePartitionHierarchical(datExpr1,ResultFolder,
indicator,'Density')
mymodule <- getPartition(ResultFolder)
randIndex(table(mymodule,truemodule),adjust=F) #0.8823006
unlink(ResultFolder, recursive = TRUE)
WeightedModulePartitionSpectral(datExpr1,ResultFolder,indicator,
GeneNames,k=5)
mymodule <- getPartition(ResultFolder)
randIndex(table(mymodule,truemodule),adjust=F) #0.9691784
unlink(ResultFolder, recursive = TRUE)
intModules1 <- WeightedModulePartitionLouvain(datExpr1,ResultFolder,indicator,GeneNames)
mymodule <- getPartition(ResultFolder)
randIndex(table(mymodule,truemodule),adjust=F) #0.936497
unlink(ResultFolder, recursive = TRUE)
intModules1 <- WeightedModulePartitionAmoutain(datExpr1,8,ResultFolder,GeneNames,maxsize=100,minsize=100)
mymodule <- getPartition(ResultFolder)
randIndex(table(mymodule,truemodule),adjust=F) #0.9274228
unlink(ResultFolder, recursive = TRUE)
document()
data(synthetic)
truemodule <- c(rep(1,100),rep(2,100),rep(3,100),rep(4,100),rep(5,100))
y <- kmeans(t(datExpr),5)
y <- kmeans(t(datExpr1),5)
y$cluster
randIndex(table(y$cluster,truemodule),adjust=F)
y <- kmeans(t(datExpr1),5)
randIndex(table(y$cluster,truemodule),adjust=F)
y <- kmeans(t(datExpr2),4)
truemodule <- c(rep(1,100),rep(2,100),rep(3,100),rep(4,200))
randIndex(table(y$cluster,truemodule),adjust=F)
y <- kmeans(t(datExpr2),4)
truemodule <- c(rep(1,100),rep(2,100),rep(3,100),rep(4,200))
randIndex(table(y$cluster,truemodule),adjust=F)
y <- kmeans(t(datExpr2),4)
truemodule <- c(rep(1,100),rep(2,100),rep(3,100),rep(4,200))
randIndex(table(y$cluster,truemodule),adjust=F)
y <- kmeans(t(datExpr2),4)
truemodule <- c(rep(1,100),rep(2,100),rep(3,100),rep(4,200))
randIndex(table(y$cluster,truemodule),adjust=F)
x=1:100
y1=sin(x)
plot(x,y1)
y1=cos(x)
cos()
plot(x,y1)
y1=cos(x)/10
plot(x,y1)
plot(x,y1,'o')
y1=sin(x)
plot(x,y1,'o')
y2=y1+1
cor(y1,y2)
plot(y1,y1)
document()
pam
document()
document()
data(synthetic)
ResultFolder <- 'ForSynthetic'
GeneNames <- colnames(datExpr1)
WeightedModulePartitionAmoutain
moduleIdentificationGPFixSS
intModules1 <- WeightedModulePartitionAmoutain(datExpr1,5,ResultFolder,GeneNames,maxsize=100,minsize=50)
datExpr=datExpr1
power=6
W <- abs(cor(datExpr,use="p"))^power
tao=0.2
W[W < tao] <- 0
N = dim(W)[1]
z <- rep(0,N)
idx <- 1
dir.create(foldername, showWarnings = FALSE)
saveAtomfile <- paste(foldername,'/AtomModule',sep='')
foldername=ResultFolder
dir.create(foldername, showWarnings = FALSE)
saveAtomfile <- paste(foldername,'/AtomModule',sep='')
x <- moduleIdentificationGPFixSS(W,z,rep(1/N,N),a=(abegin+aend)/2,
lambda=0,maxiter = 50)
abegin = 0.01
aend = 0.9
x <- moduleIdentificationGPFixSS(W,z,rep(1/N,N),a=(abegin+aend)/2,
lambda=0,maxiter = 50)
for (i in 1:20) {
#x <- CGPFixSS(W,z,rep(1/N,N),a=(abegin+aend)/2,lambda=0,maxiter = 50)
x <- moduleIdentificationGPFixSS(W,z,rep(1/N,N),a=(abegin+aend)/2,
lambda=0,maxiter = 50)
predictedid <- which(x[[2]]!=0)
if(length(predictedid) > maxsize){
abegin = (abegin+aend)/2
}else if (length(predictedid) < minsize){
aend = (abegin+aend)/2
}else
break
}
maxsize=200
maxsize=100
minsize=50
for (i in 1:20) {
#x <- CGPFixSS(W,z,rep(1/N,N),a=(abegin+aend)/2,lambda=0,maxiter = 50)
x <- moduleIdentificationGPFixSS(W,z,rep(1/N,N),a=(abegin+aend)/2,
lambda=0,maxiter = 50)
predictedid <- which(x[[2]]!=0)
if(length(predictedid) > maxsize){
abegin = (abegin+aend)/2
}else if (length(predictedid) < minsize){
aend = (abegin+aend)/2
}else
break
}
length(predictedid)
predictedid
class(predictedid)
if(length(predictedid) <= maxsize){
modulescore = sum(W[predictedid,predictedid])
write.table(GeneNames[predictedid],file = paste(foldername,'/',
floor(modulescore),'-moduleid-',idx,'.txt',sep=''),
quote = FALSE, row.names = FALSE, col.names = FALSE)
idx <- idx+1
}
else if(length(predictedid) > maxsize){
modulescoreW = W[predictedid,predictedid]
print(paste('Atom! with size',length(predictedid),sep=' '))
tmpstr = as.numeric(GeneNames[predictedid])-1
forTotalcompletegraph(tmpstr,modulescoreW,saveAtomfile)
}
if(length(predictedid) <= maxsize){
modulescore = sum(W[predictedid,predictedid])
write.table(GeneNames[predictedid],file = paste(foldername,'/',
floor(modulescore),'-moduleid-',idx,'.txt',sep=''),
quote = FALSE, row.names = FALSE, col.names = FALSE)
idx <- idx+1
}
else if(length(predictedid) > maxsize){
modulescoreW = W[predictedid,predictedid]
print(paste('Atom! with size',length(predictedid),sep=' '))
tmpstr = as.numeric(GeneNames[predictedid])-1
forTotalcompletegraph(tmpstr,modulescoreW,saveAtomfile)
}
length(predictedid)
maxsize
dim(W)
length(GeneNames)
ii=1
W = W[-predictedid,-predictedid]
GeneNames = GeneNames[-predictedid]
N = length(GeneNames)
print(paste('Finishing module ',ii,sep=''))
dim(W)
N
length(GeneNames)
abegin = 0.01
aend = 0.9
x <- moduleIdentificationGPFixSS(W,z,rep(1/N,N),a=(abegin+aend)/2,
lambda=0,maxiter = 50)
z = z[-predictedid]
x <- moduleIdentificationGPFixSS(W,z,rep(1/N,N),a=(abegin+aend)/2,
lambda=0,maxiter = 50)
predictedid <- which(x[[2]]!=0)
document()
data(synthetic)
ResultFolder <- 'ForSynthetic' # where middle files are stored
GeneNames <- colnames(datExpr1)
intModules1 <- WeightedModulePartitionAmoutain(datExpr1,5,ResultFolder,
GeneNames,maxsize=100,minsize=50)
truemodule <- c(rep(1,100),rep(2,100),rep(3,100),rep(4,100),rep(5,100))
mymodule <- getPartition(ResultFolder)
randIndex(table(mymodule,truemodule),adjust=F)
ResultFolder <- 'ForSynthetic' # where middle files are stored
GeneNames <- colnames(datExpr1)
intModules1 <- WeightedModulePartitionAmoutain(datExpr1,5,ResultFolder,
GeneNames,maxsize=100,minsize=100)
truemodule <- c(rep(1,100),rep(2,100),rep(3,100),rep(4,100),rep(5,100))
mymodule <- getPartition(ResultFolder)
randIndex(table(mymodule,truemodule),adjust=F)
document()
document()
getPartition
data(synthetic)
ResultFolder <- 'ForSynthetic' # where middle files are stored
GeneNames <- colnames(datExpr1)
intModules1 <- WeightedModulePartitionAmoutain(datExpr1,5,ResultFolder,
GeneNames,maxsize=100,minsize=50)
truemodule <- c(rep(1,100),rep(2,100),rep(3,100),rep(4,100),rep(5,100))
mymodule <- getPartition(ResultFolder)
randIndex(table(mymodule,truemodule),adjust=F)
rm(list=ls())
getPartition
data(synthetic)
ResultFolder <- 'ForSynthetic' # where middle files are stored
GeneNames <- colnames(datExpr1)
intModules1 <- WeightedModulePartitionAmoutain(datExpr1,5,ResultFolder,
GeneNames,maxsize=100,minsize=100)
truemodule <- c(rep(1,100),rep(2,100),rep(3,100),rep(4,100),rep(5,100))
mymodule <- getPartition(ResultFolder)
randIndex(table(mymodule,truemodule),adjust=F)
getPartition
document()
